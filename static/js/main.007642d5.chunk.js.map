{"version":3,"sources":["components/About/About.js","components/TrackerDisplay/TrackerDisplay.js","components/TrackerHistory/TrackerHistory.js","components/TrackerAddTransaction/TrackerAddTransaction.js","components/Tracker/Tracker.js","App.js","serviceWorker.js","index.js"],"names":["About","TrackerDisplay","balance","income","expenseAmount","incomeDate","className","id","title","TrackerHistory","props","expense","removeTransaction","console","log","length","map","item","i","key","onClick","TrackerAddTransaction","useState","transactionType","setTransactionType","incomeAmount","form","setForm","handleFormChange","e","target","name","value","options","label","onChange","views","$","view","hide","fadeIn","data-transaction-view","type","placeholder","preventDefault","handleIncome","handleExpense","Tracker","setIncome","setIncomeDate","setExpense","reduce","totalExpense","currentExpense","Number","Date","toLocaleDateString","expenseName","App","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.007642d5.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function About() {\r\n    return (\r\n        <div>\r\n            About\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\nexport default function TrackerDisplay({balance, income, expenseAmount, incomeDate}) {\r\n    return (\r\n        <div className=\"tracker-display\">\r\n            <div className=\"tracker__display-title\">\r\n                <h4>Your Balance</h4>\r\n                <h1 id=\"balance\">${balance ? balance : '0'}</h1>\r\n            </div>\r\n\r\n            <div className=\"tracker__display\">\r\n                <div className=\"tracker__display-item\">\r\n                    <span className=\"tracker__display-item-title\">Income <span className=\"tooltip\" title={'Last entry: ' + incomeDate}><span>?</span></span></span>\r\n                    <p id=\"money-plus\" className=\"color-green\">${income}</p>\r\n                </div>\r\n                <div className=\"tracker__display-item\">\r\n                    <span className=\"tracker__display-item-title\">Expense</span>\r\n                    <p id=\"money-minus\" className=\"color-red\">${expenseAmount}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nexport default function TrackerHistory(props) {\r\n    const {expense} = props;\r\n\r\n    function removeTransaction() {\r\n        console.log('remove transaction');\r\n    }\r\n    return (\r\n        <div className=\"tracker-history\">\r\n            <h3 className=\"tracker-history__title\">History</h3>\r\n            <ul id=\"tracker-history\" className=\"tracker-history__list\">\r\n                {   expense.length > 0 ?\r\n                    expense.map((item, i) => (\r\n                        <li key={i+1} className=\"tracker-history__list-item icon-plus\">\r\n                            <div className=\"tracker-history__list-item-text\">\r\n                                {item[0]} <span>+{item[1]}$</span>\r\n                            </div>\r\n                            <button className=\"tracker-history__list-item-btn btn-delete\" title=\"Remove\" onClick={removeTransaction}>x</button>\r\n                        </li>\r\n                    ))\r\n                    : []\r\n                }\r\n                \r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport $ from 'jquery';\r\nimport Select from 'react-select';\r\n\r\nexport default function TrackerAddTransaction(props) {\r\n    const [transactionType, setTransactionType] = useState('');\r\n    const [form, setForm] = useState({\r\n        incomeAmount: 0,\r\n        expense: \"\",\r\n        expenseAmount: 0\r\n    });\r\n\r\n    const handleFormChange = (e) => {\r\n        setForm({\r\n            ...form,\r\n            [e.target.name]: e.target.value\r\n        });\r\n    };\r\n    \r\n    const options = [\r\n        { value: 'expense', label: 'Add Expense' },\r\n        { value: 'income', label: 'Add Income' },\r\n    ];\r\n    \r\n    function changeTransactionView(e) {\r\n        let views = $('[data-transaction-view]');\r\n        for (let view of views) {\r\n            $(view).hide();\r\n            setTransactionType(e.value);\r\n        }\r\n        $(`[data-transaction-view=\"${e.value}\"]`).fadeIn();\r\n    }\r\n\r\n    function handleTransaction(e) {\r\n        e.preventDefault();\r\n        if (transactionType === 'income') {\r\n            props.handleIncome(form.incomeAmount);\r\n        } else {\r\n            props.handleExpense(form.expense, form.expenseAmount);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"tracker-add-trans\">\r\n            <h3>Add new transaction</h3>\r\n            <form id=\"form\" className=\"form tracker-add-trans__form\">\r\n                <Select\r\n                    options={options}\r\n                    className=\"form-select\"\r\n                    onChange={changeTransactionView}\r\n                />\r\n                <div className=\"form-control tracker-add-trans__form-item\" data-transaction-view=\"expense\">\r\n                    <span>Text</span>\r\n                    <input \r\n                        type=\"text\"\r\n                        name=\"expense\"\r\n                        value={form.expense}\r\n                        onChange={handleFormChange}\r\n                        placeholder=\"Enter text...\"\r\n                    />\r\n                    <span>Amount</span>\r\n                    <input \r\n                        type=\"number\"\r\n                        name=\"expenseAmount\"\r\n                        value={form.expenseAmount}\r\n                        onChange={handleFormChange}\r\n                        placeholder=\"Enter Amount...\"\r\n                    />\r\n                </div>\r\n                <div className=\"form-control tracker-add-trans__form-item\" data-transaction-view=\"income\">\r\n                    <span>Amount</span>\r\n                    <input \r\n                        type=\"number\" \r\n                        name=\"incomeAmount\" \r\n                        value={form.incomeAmount} \r\n                        onChange={handleFormChange} \r\n                        placeholder=\"Enter amount...\" \r\n                    />\r\n                </div>\r\n                <button className=\"btn\" onClick={handleTransaction}>Add transaction</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nimport './tracker.scss';\r\n\r\nimport TrackerDisplay from '../TrackerDisplay/TrackerDisplay';\r\nimport TrackerHistory from '../TrackerHistory/TrackerHistory';\r\nimport TrackerAddTransaction from '../TrackerAddTransaction/TrackerAddTransaction';\r\n\r\nexport default function Tracker() {\r\n    const [income, setIncome] = useState(0);\r\n    const [incomeDate, setIncomeDate] = useState('');\r\n    const [expense, setExpense] = useState([]);\r\n\r\n    const handleIncome = (value) => {\r\n        setIncome(Number(income) + Number(value));\r\n        setIncomeDate(new Date().toLocaleDateString());\r\n    }\r\n\r\n    const handleExpense = (expenseName, expenseAmount) => {\r\n        setExpense([\r\n            ...expense,\r\n            [expenseName, expenseAmount]\r\n        ]);\r\n    }\r\n\r\n    const calculateExpenseAmount = () => {\r\n        return expense.reduce((totalExpense, currentExpense) => {\r\n            return Number(totalExpense) + Number(currentExpense[1]);\r\n        }, 0);\r\n    }\r\n\r\n    // TODO - Make function to calculate balance\r\n\r\n    return (\r\n        <div className=\"tracker\">\r\n            <TrackerDisplay \r\n                income={income}\r\n                incomeDate={incomeDate}\r\n                expenseAmount={calculateExpenseAmount()}\r\n            />\r\n\r\n            <TrackerHistory \r\n                expense={expense}\r\n            />\r\n            \r\n            <TrackerAddTransaction \r\n                income={income}\r\n                handleIncome={handleIncome}\r\n                handleExpense={handleExpense}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\n\r\nimport './scss/main.scss';\r\n\r\nimport About from './components/About/About';\r\nimport Tracker from './components/Tracker/Tracker';\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div className=\"container-fluid\">\r\n\t\t\t<Router>\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"header\">\r\n\t\t\t\t\t\t<nav className=\"navigation\">\r\n\t\t\t\t\t\t\t<Link to=\"/\" className=\"navigation__link\">Home</Link>\r\n\t\t\t\t\t\t\t<Link to=\"/about\" className=\"navigation__link\">About</Link>\r\n\t\t\t\t\t\t</nav>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route exact path=\"/\" component={Tracker}></Route>\r\n\t\t\t\t\t<Route path=\"/about\" component={About}></Route>\r\n\t\t\t\t</Switch>\r\n\t\t\t</Router>\r\n\t\t</div>\r\n\t);\r\n}\r\n\t\r\nexport default App;\r\n\t","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}