{"version":3,"sources":["components/About/About.js","components/TrackerDisplay/TrackerDisplay.js","components/TrackerHistory/TrackerHistory.js","components/TrackerAddTransaction/TrackerAddTransaction.js","components/Tracker/Tracker.js","App.js","serviceWorker.js","index.js"],"names":["About","TrackerDisplay","balance","income","expenseAmount","incomeDate","className","id","title","TrackerHistory","props","expense","useState","historyExpenses","setHistoryExpenses","removeTransaction","console","log","useEffect","length","map","item","i","key","onClick","TrackerAddTransaction","addTransactionAmount","setAddTransactionAmount","transactionType","setTransactionType","setExpense","setExpenseAmount","options","value","label","onChange","e","views","$","view","hide","fadeIn","data-transaction-view","type","defaultValue","target","placeholder","preventDefault","handleIncome","handleDisplayExpense","handleHistoryExpense","Tracker","setIncome","setIncomeDate","expenseName","epenseAmount","Number","Date","toLocaleDateString","App","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d8edfd89.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function About() {\r\n    return (\r\n        <div>\r\n            About\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\n\r\nexport default function TrackerDisplay({balance, income, expenseAmount, incomeDate}) {\r\n    return (\r\n        <div className=\"tracker-display\">\r\n            <div className=\"tracker__display-title\">\r\n                <h4>Your Balance</h4>\r\n                <h1 id=\"balance\">${balance ? balance : '0'}</h1>\r\n            </div>\r\n\r\n            <div className=\"tracker__display\">\r\n                <div className=\"tracker__display-item\">\r\n                    <span className=\"tracker__display-item-title\">Income <span className=\"tooltip\" title={'Last entry: ' + incomeDate}><span>?</span></span></span>\r\n                    <p id=\"money-plus\" className=\"color-green\">${income}</p>\r\n                </div>\r\n                <div className=\"tracker__display-item\">\r\n                    <span className=\"tracker__display-item-title\">Expense</span>\r\n                    <p id=\"money-minus\" className=\"color-red\">${expenseAmount}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nexport default function TrackerHistory(props) {\r\n    \r\n    const {expense} = props;\r\n    const [historyExpenses, setHistoryExpenses] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setHistoryExpenses(\r\n            addExpense()\r\n        );\r\n        // console.log('historyExpenses ', historyExpenses);\r\n    }, [expense]);\r\n\r\n    function addExpense() {\r\n        let arr = [...historyExpenses, expense];\r\n        return arr;\r\n    }\r\n    \r\n    function removeTransaction() {\r\n        console.log('remove transaction');\r\n    }\r\n    return (\r\n        <div className=\"tracker-history\">\r\n            <h3 className=\"tracker-history__title\">History</h3>\r\n            <ul id=\"tracker-history\" className=\"tracker-history__list\">\r\n                {   historyExpenses.length > 0 ?\r\n                    historyExpenses.map((item, i) => (\r\n                        <li key={i+1} className=\"tracker-history__list-item icon-plus\">\r\n                            <div className=\"tracker-history__list-item-text\">\r\n                                {item[0]} <span>+{item[1]}$</span>\r\n                            </div>\r\n                            <button className=\"tracker-history__list-item-btn btn-delete\" title=\"Remove\" onClick={removeTransaction}>x</button>\r\n                        </li>\r\n                    ))\r\n                    : []\r\n                }\r\n                \r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport $ from 'jquery';\r\nimport Select from 'react-select';\r\n\r\nexport default function TrackerAddTransaction(props) {\r\n    const [addTransactionAmount, setAddTransactionAmount] = useState(0);\r\n    const [transactionType, setTransactionType] = useState('');\r\n    const [expense, setExpense] = useState('');\r\n    const [expenseAmount, setExpenseAmount] = useState(0);\r\n    \r\n    const options = [\r\n        { value: 'expense', label: 'Add Expense' },\r\n        { value: 'income', label: 'Add Income' },\r\n    ];\r\n    \r\n    function changeTransactionView(e) {\r\n        let views = $('[data-transaction-view]');\r\n        for (let view of views) {\r\n            $(view).hide();\r\n            setTransactionType(e.value);\r\n        }\r\n        $(`[data-transaction-view=\"${e.value}\"]`).fadeIn();\r\n    }\r\n    function handleTransaction(e) {\r\n        e.preventDefault();\r\n        if (transactionType === 'income' ) {\r\n            props.handleIncome(addTransactionAmount);\r\n        } else {\r\n            props.handleDisplayExpense(expenseAmount);\r\n            props.handleHistoryExpense(expense, expenseAmount);\r\n        }\r\n    }\r\n    function bindTransactionAmountToState(e) {\r\n        setAddTransactionAmount(e.target.value);\r\n    }\r\n    function bindExpenseTextToState(e) {\r\n        setExpense(e.target.value);\r\n    }\r\n    function bindExpenseAmountToState(e) {\r\n        setExpenseAmount(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"tracker-add-trans\">\r\n            <h3>Add new transaction</h3>\r\n            <form id=\"form\" className=\"form tracker-add-trans__form\">\r\n                <Select\r\n                    options={options}\r\n                    className=\"form-select\"\r\n                    onChange={changeTransactionView}\r\n                />\r\n                <div className=\"form-control tracker-add-trans__form-item\" data-transaction-view=\"expense\">\r\n                    <span>Text</span>\r\n                    <input \r\n                        type=\"text\"\r\n                        id=\"text\"\r\n                        defaultValue={expense}\r\n                        onChange={bindExpenseTextToState}\r\n                        placeholder=\"Enter text...\"\r\n                    />\r\n                    <span>Amount</span>\r\n                    <input \r\n                        type=\"number\"\r\n                        id=\"expenseAmount\"\r\n                        defaultValue={expenseAmount}\r\n                        onChange={bindExpenseAmountToState}\r\n                        placeholder=\"Enter Amount...\"\r\n                    />\r\n                </div>\r\n                <div className=\"form-control tracker-add-trans__form-item\" data-transaction-view=\"income\">\r\n                    <span>Amount</span>\r\n                    <input \r\n                        type=\"number\" \r\n                        id=\"incomeAmount\" \r\n                        defaultValue={addTransactionAmount} \r\n                        onChange={bindTransactionAmountToState} \r\n                        placeholder=\"Enter amount...\" \r\n                    />\r\n                </div>\r\n                <button className=\"btn\" onClick={handleTransaction}>Add transaction</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nimport './tracker.scss';\r\n\r\nimport TrackerDisplay from '../TrackerDisplay/TrackerDisplay';\r\nimport TrackerHistory from '../TrackerHistory/TrackerHistory';\r\nimport TrackerAddTransaction from '../TrackerAddTransaction/TrackerAddTransaction';\r\n\r\nexport default function Tracker() {\r\n    const [income, setIncome] = useState(0);\r\n    const [incomeDate, setIncomeDate] = useState('');\r\n    const [expense, setExpense] = useState([]);\r\n    const [expenseAmount, setExpenseAmount] = useState(0);\r\n\r\n    const handleIncome = (value) => {\r\n        setIncome(Number(income) + Number(value));\r\n        setIncomeDate(new Date().toLocaleDateString());\r\n    }\r\n\r\n    const handleDisplayExpense = (value) => {\r\n        setExpenseAmount(Number(expenseAmount) + Number(value))\r\n    }\r\n    const pushExpense = (a,b) => {\r\n        let arr = [a,b];\r\n        return arr;\r\n    }\r\n    const handleHistoryExpense = (expenseName, epenseAmount) => {\r\n        setExpense(\r\n            pushExpense(expenseName, epenseAmount)\r\n        );\r\n    }\r\n    return (\r\n        <div className=\"tracker\">\r\n            <TrackerDisplay \r\n                income={income}\r\n                incomeDate={incomeDate}\r\n                expenseAmount={expenseAmount}\r\n            />\r\n            <TrackerHistory \r\n                handleHistoryExpense={handleHistoryExpense}\r\n                expense={expense}\r\n            />\r\n\r\n            {/* start\r\n                Inputs are binded to component state\r\n                User inputs transaction (expense/income)\r\n                On click it sets state of expense or income\r\n                \r\n            */}\r\n            <TrackerAddTransaction \r\n                income={income}\r\n                handleIncome={handleIncome}\r\n                handleDisplayExpense={handleDisplayExpense}\r\n                handleHistoryExpense={handleHistoryExpense}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport './scss/main.scss';\n\nimport About from './components/About/About';\nimport Tracker from './components/Tracker/Tracker';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"container-fluid\">\n\t\t\t<Router>\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div className=\"header\">\n\t\t\t\t\t\t<nav className=\"navigation\">\n\t\t\t\t\t\t\t<Link to=\"/\" className=\"navigation__link\">Home</Link>\n\t\t\t\t\t\t\t<Link to=\"/about\" className=\"navigation__link\">About</Link>\n\t\t\t\t\t\t</nav>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path=\"/\" component={Tracker}></Route>\n\t\t\t\t\t<Route path=\"/about\" component={About}></Route>\n\t\t\t\t</Switch>\n\t\t\t</Router>\n\t\t</div>\n\t);\n}\n\t\nexport default App;\n\t","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}